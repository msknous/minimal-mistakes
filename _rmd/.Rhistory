plot(cars$speed,cars$dist)
model<-rvm(cars$speed,cars$dist)
ytest<-predict(model,cars$speed)
lines(cars$speed,ytest,col="red")
model2<-rvm(cars$speed,cars$dist,cross=6,fit=T,iterations=1,tol=0.01)
ytest<-predict(model2,cars$speed)
lines(cars$speed,ytest,col="yellow")
set.seed(1234)
library(kernlab)
data(cars)
plot(cars$speed,cars$dist)
model<-rvm(cars$speed,cars$dist)
ytest<-predict(model,cars$speed)
lines(cars$speed,ytest,col="red")
model2<-rvm(cars$speed,cars$dist,cross=6,fit=T,iterations=1,tol=0.01)
ytest<-predict(model2,cars$speed)
lines(cars$speed,ytest,col="yellow")
set.seed(1234)
library(kernlab)
data(cars)
plot(cars$speed,cars$dist)
model<-rvm(cars$speed,cars$dist)
ytest<-predict(model,cars$speed)
lines(cars$speed,ytest,col="red")
model2<-rvm(cars$speed,cars$dist,cross=10,fit=T,iterations=1,tol=0.01)
ytest<-predict(model2,cars$speed)
lines(cars$speed,ytest,col="yellow")
set.seed(1234)
library(kernlab)
data(cars)
plot(cars$speed,cars$dist)
model<-rvm(cars$speed,cars$dist)
ytest<-predict(model,cars$speed)
lines(cars$speed,ytest,col="red")
model2<-rvm(cars$speed,cars$dist,cross=100,fit=T,iterations=1,tol=0.01)
ytest<-predict(model2,cars$speed)
lines(cars$speed,ytest,col="yellow")
##Using Relevance Vector Machine (like a support vector machine)
set.seed(1234)
library(kernlab)
data(cars)
plot(cars$speed,cars$dist)
model<-rvm(cars$speed,cars$dist)
ytest<-predict(model,cars$speed)
lines(cars$speed,ytest,col="red")
model2<-rvm(cars$speed,cars$dist,cross=6,fit=T,iterations=10,tol=0.01)
ytest<-predict(model2,cars$speed)
lines(cars$speed,ytest,col="yellow")
##Using Relevance Vector Machine (like a support vector machine)
set.seed(1234)
library(kernlab)
data(cars)
plot(cars$speed,cars$dist)
model<-rvm(cars$speed,cars$dist)
ytest<-predict(model,cars$speed)
lines(cars$speed,ytest,col="red")
model2<-rvm(cars$speed,cars$dist,cross=6,fit=T,iterations=10,tol=0.01)
ytest<-predict(model2,cars$speed)
lines(cars$speed,ytest,col="yellow")
##Using Relevance Vector Machine (like a support vector machine)
set.seed(1234)
library(kernlab)
data(cars)
plot(cars$speed,cars$dist)
model<-rvm(cars$speed,cars$dist)
ytest<-predict(model,cars$speed)
lines(cars$speed,ytest,col="red")
model2<-rvm(cars$speed,cars$dist,cross=6,fit=T,iterations=10,tol=0.01)
ytest<-predict(model2,cars$speed)
lines(cars$speed,ytest,col="yellow")
##Using Relevance Vector Machine (like a support vector machine)
set.seed(1234)
library(kernlab)
data(cars)
plot(cars$speed,cars$dist)
model<-rvm(cars$speed,cars$dist)
ytest<-predict(model,cars$speed)
lines(cars$speed,ytest,col="red")
model2<-rvm(cars$speed,cars$dist,cross=6,fit=T,iterations=10,tol=0.01)
ytest<-predict(model2,cars$speed)
lines(cars$speed,ytest,col="yellow")
##Using Relevance Vector Machine (like a support vector machine)
set.seed(1234)
library(kernlab)
data(cars)
plot(cars$speed,cars$dist)
model<-rvm(cars$speed,cars$dist)
ytest<-predict(model,cars$speed)
lines(cars$speed,ytest,col="red")
model2<-rvm(cars$speed,cars$dist,cross=6,fit=T,iterations=1,tol=0.1)
ytest<-predict(model2,cars$speed)
lines(cars$speed,ytest,col="yellow")
##Using Relevance Vector Machine (like a support vector machine)
set.seed(1234)
library(kernlab)
data(cars)
plot(cars$speed,cars$dist)
model<-rvm(cars$speed,cars$dist)
ytest<-predict(model,cars$speed)
lines(cars$speed,ytest,col="red")
model2<-rvm(cars$speed,cars$dist,cross=6,fit=T,iterations=1,tol=0.1)
ytest<-predict(model2,cars$speed)
lines(cars$speed,ytest,col="yellow")
##Using Relevance Vector Machine (like a support vector machine)
set.seed(1234)
library(kernlab)
data(cars)
plot(cars$speed,cars$dist)
model<-rvm(cars$speed,cars$dist)
ytest<-predict(model,cars$speed)
lines(cars$speed,ytest,col="red")
model2<-rvm(cars$speed,cars$dist,cross=6,fit=T,iterations=1,tol=0.1)
ytest<-predict(model2,cars$speed)
lines(cars$speed,ytest,col="yellow")
iris1<-iris
levels(iris1[,5])
iris1[,5]<-as.numeric(iris1[,5])
ind<-sample(2,nrow(iris),prob=c(.7,.3),replace=T)
trainD<-iris1[ind==1,]
testD<-iris1[ind==2,]
cb<-cbind(trainD[,1],trainD[,2],trainD[,3],trainD[,4])
#model<-rvm(cb,trainD[,5],iteration=100,tol=.001,cros=50,fit=T)
model<-rvm(cb,trainD[,5])
ypred<-predict(model,testD[,-5])
yround<-factor(round(ypred))
print(table(yround,testD[,5]))
print(error(model))
iris1<-iris
levels(iris1[,5])
iris1[,5]<-as.numeric(iris1[,5])
ind<-sample(2,nrow(iris),prob=c(.7,.3),replace=T)
trainD<-iris1[ind==1,]
testD<-iris1[ind==2,]
cb<-cbind(trainD[,1],trainD[,2],trainD[,3],trainD[,4])
#model<-rvm(cb,trainD[,5],iteration=100,tol=.001,cros=50,fit=T)
model<-rvm(cb,trainD[,5])
ypred<-predict(model,testD[,-5])
yround<-factor(round(ypred))
print(table(yround,testD[,5]))
print(error(model))
iris1<-iris
levels(iris1[,5])
iris1[,5]<-as.numeric(iris1[,5])
ind<-sample(2,nrow(iris),prob=c(.7,.3),replace=T)
trainD<-iris1[ind==1,]
testD<-iris1[ind==2,]
cb<-cbind(trainD[,1],trainD[,2],trainD[,3],trainD[,4])
#model<-rvm(cb,trainD[,5],iteration=100,tol=.001,cros=50,fit=T)
model<-rvm(cb,trainD[,5])
ypred<-predict(model,testD[,-5])
yround<-factor(round(ypred))
print(table(yround,testD[,5]))
print(error(model))
iris1<-iris
levels(iris1[,5])
iris1[,5]<-as.numeric(iris1[,5])
ind<-sample(2,nrow(iris),prob=c(.7,.3),replace=T)
trainD<-iris1[ind==1,]
testD<-iris1[ind==2,]
cb<-cbind(trainD[,1],trainD[,2],trainD[,3],trainD[,4])
#model<-rvm(cb,trainD[,5],iteration=100,tol=.001,cros=50,fit=T)
model<-rvm(cb,trainD[,5])
ypred<-predict(model,testD[,-5])
yround<-factor(round(ypred))
print(table(yround,testD[,5]))
print(error(model))
set.seed(1234)
iris1<-iris
levels(iris1[,5])
iris1[,5]<-as.numeric(iris1[,5])
ind<-sample(2,nrow(iris),prob=c(.7,.3),replace=T)
trainD<-iris1[ind==1,]
testD<-iris1[ind==2,]
cb<-cbind(trainD[,1],trainD[,2],trainD[,3],trainD[,4])
#model<-rvm(cb,trainD[,5],iteration=100,tol=.001,cros=50,fit=T)
model<-rvm(cb,trainD[,5])
ypred<-predict(model,testD[,-5])
yround<-factor(round(ypred))
print(table(yround,testD[,5]))
print(error(model))
iris1<-iris
levels(iris1[,5])
iris1[,5]<-as.numeric(iris1[,5])
ind<-sample(2,nrow(iris),prob=c(.7,.3),replace=T)
trainD<-iris1[ind==1,]
testD<-iris1[ind==2,]
cb<-cbind(trainD[,1],trainD[,2],trainD[,3],trainD[,4])
#model<-rvm(cb,trainD[,5],iteration=100,tol=.001,cros=50,fit=T)
model<-rvm(cb,trainD[,5])
ypred<-predict(model,testD[,-5])
yround<-factor(round(ypred))
print(table(yround,testD[,5]))
print(error(model))
load(installer)
load(installR)
load(installr)
load(installr)
load("installr")
library("installr", lib.loc="~/R/win-library/3.2")
?installr
update.packages()
y
y
y
y
updateR
updateR()
check.for.updates.R()
install.Rtools()
install.packages(c("arules", "coin", "mgcv", "ncvreg", "party", "ranger", "rattle", "statmod", "xtable"))
install.packages(c("ade4", "ape", "arules", "BH", "bst", "cairoDevice", "car", "caret", "checkmate", "coin", "digest", "earth", "FCNN4R", "ggplot2", "htmltools", "jsonlite", "kernlab", "latticeExtra", "lhs", "lme4", "mda", "mgcv", "mlr", "multcomp", "munsell", "mvtnorm", "ncvreg", "nlme", "nnet", "ParamHelpers", "partykit", "plotrix", "prodlim", "quantreg", "R6", "randomForestSRC", "rattle", "Rcpp", "RcppEigen", "rgl", "RGraphics", "rJava", "seriation", "shiny", "statmod", "TeachingDemos", "tgp", "TH.data", "tree", "xtable"))
library("Boruta", lib.loc="~/R/win-library/3.2")
library("brglm", lib.loc="~/R/win-library/3.2")
library("bst", lib.loc="~/R/win-library/3.2")
library("bmrm", lib.loc="~/R/win-library/3.2")
library("BradleyTerry2", lib.loc="~/R/win-library/3.2")
library("bitops", lib.loc="~/R/win-library/3.2")
library("bigRR", lib.loc="~/R/win-library/3.2")
library("biclust", lib.loc="~/R/win-library/3.2")
install.packages("rmarkdown")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
unlink('firstrmarkdown_cache', recursive = TRUE)
unlink('GitHub/msknous.github.io/_posts/2018-11-20-R-markdown-is-awesome_cache', recursive = TRUE)
library(knitr)
names(knitr::knit_engines$get())
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
install.packages("reticulate")
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
use_python("D:/Anaconda35/python")
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
use_python("D:/Anaconda35/python")
library(reticulate)
x=42
print(x)
x = x+12
print(x)
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
use_python("D:/Anaconda35/python")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(engine.path = list(
python = "D:/Anaconda35/python"
))
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(engine.path = list(
python = "D:/Anaconda35/python"
))
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(engine.path = list(
python = "D:/Anaconda35/python"
))
View(knit_engines)
View(knit_engines)
r x', which was d'
knit_engines
knit_engines:get
View(knit_engines)
View(knit_engines)
body(knit_engines[["get"]])[[2]]
body(knit_engines[["get"]])[[1]]
knit_engines[["get"]]
knit_engines
Sys.which()
Sys.which(python)
Sys.which('python')
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(engine.path = list(
python = "D:\\Anaconda35\\python"
))
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(engine.path = list(
python = "D:\\Anaconda35\\python"
))
py_config()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(engine.path = list(
python = " D:\Anaconda35\python.exe"
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(engine.path = list(
python = " D:\Anaconda35\python"
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(engine.path = list(
python = " d:\Anaconda35\python"
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(engine.path = list(
python = " D:/Anaconda35/python"
))
py_discover_config()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(engine.path = " D:/Anaconda35/python")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(engine.path = " D:\Anaconda35\python")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(engine.path = " D:\anaconda35\python")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(engine.path = " d:\anaconda35\python")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(engine.path = ' d:\anaconda35\python')
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(engine.path = " d:\anaconda35\python)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(engine.path = ' d:\anaconda35\python')
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(engine.path = ' d:\\anaconda35\\python')
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(engine.path = ' D:\\Anaconda35\\python')
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(engine.path = pthyon = ' D:\\Anaconda35\\python')
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(engine.path = python = ' D:\\Anaconda35\\python')
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(engine.path = python = ' D:\\Anaconda35\\python')
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(engine.path = ' D:\\Anaconda35\\python')
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(engine.path = ' D://Anaconda35//python')
x = x+12
print(x)
x = x+12
print(x)
x = x+12
print(x)
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(engine.path = " D://Anaconda35//python")
Sys.which()
Sys.which(python)
py_discover_config()
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(engine.path = " D:\Anaconda35\python")
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(engine.path = " D:\\Anaconda35\\python")
x = x+12
print(x)
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(engine.path = list(python =" D:\\Anaconda35\\python"
))
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set('python',engine.path=" D:\\Anaconda35\\python"
)
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set('python',engine.path=" D:\\Anaconda35\\python"
)
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set('python',engine.path=" D:/Anaconda35/python"
)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set('python',
"D://Anaconda35//python")
library(knitr)
opts_chunk$set('python',
engine.path="D://Anaconda35//python")
library(knitr)
opts_chunk$set('python',
engine.path="D://Anaconda35//python")
library(knitr)
opts_chunk$set('python',
engine.path="D://Anaconda35//python")
library(knitr)
opts_chunk$set('python',
engine.path='D://Anaconda35//python')
library(knitr)
opts_chunk$set('python',
engine.path='D:/Anaconda35/python')
library(knitr)
opts_chunk$set('python',
engine.path='D:\Anaconda35\python')
library(knitr)
opts_chunk$set('python',
engine.path='D:\\Anaconda35\\python')
Sys.getenv()
Sys.getenv()
Sys.getenv()
Sys.getenv()
Sys.getenv("d:/anaconda")
Sys.getenv("PATH")
sys.setenv(PATH = paste("d:\\anaconda35",Sys.getenv("PATH"),sep":"))
Sys.setenv(PATH = paste("d:\\anaconda35",Sys.getenv("PATH"),sep":"))
Sys.getenv("PATH")
Sys.setenv(PATH = paste("d:\\anaconda35",Sys.getenv("PATH"),sep";"))
Sys.setenv(PATH = paste("d:\\anaconda35",Sys.getenv("PATH"),sep=";"))
Sys.getenv("PATH")
library(knitr)
opts_chunk$set('python',
engine.path='D:\\Anaconda35\\python')
Sys.getenv("path")
Sys.getenv("PATH")
sys.setenv(PATH = paste("d:\\anaconda35",Sys.getenv("PATH"),sep":"))
sys.setenv(PATH = paste("d:\\anaconda35",Sys.getenv("PATH"),sep=";"))
sys.setenv(PATH = paste("d:\\anaconda35",Sys.getenv("PATH"),sep=";"))
Sys.setenv(PATH = paste("d:\\anaconda35",Sys.getenv("PATH"),sep=";"))
Sys.getenv("PATH")
knitr::opts_chunk$set(echo = TRUE)
Sys.setenv(PATH = paste("d:\\anaconda35",Sys.getenv("PATH"),sep=";"))
library(reticulate)
x=42
print(x)
x = x+12
print(x)
py$y
py$y = 1:5
knitr::opts_chunk$set(echo = TRUE)
Sys.setenv(PATH = paste("d:\\anaconda35",Sys.getenv("PATH"),sep=";"))
library(reticulate)
path_to_python <- ("d:\\anaconda35\\python")
use_python(path_to_python)
knitr::knit_engines$set(python = reticulate::eng_python)
py_available(initialize = TRUE)
knitr::opts_chunk$set(echo = TRUE)
Sys.setenv(PATH = paste("d:\\anaconda35",Sys.getenv("PATH"),sep=";"))
library(reticulate)
path_to_python <- ("d:\\anaconda35\\python")
use_python(path_to_python)
knitr::knit_engines$set(python = reticulate::eng_python)
py_available(initialize = TRUE)
x=42
print(x)
x = x+12
print(x)
py$y
py$y = 1:5
knitr::opts_chunk$set(echo = TRUE)
Sys.setenv(PATH = paste("d:\\anaconda35",Sys.getenv("PATH"),sep=";"))
library(reticulate)
path_to_python <- ("d:\\anaconda35\\python")
use_python(path_to_python)
knitr::knit_engines$set(python = reticulate::eng_python)
py_available(initialize = TRUE)
x=42
print(x)
x = x+12
print(x)
py$y
py$x
```{python}
knitr::opts_chunk$set(echo = TRUE)
#Sys.setenv(PATH = paste("d:\\anaconda35",Sys.getenv("PATH"),sep=";"))
library(reticulate)
path_to_python <- ("d:\\anaconda35\\python")
use_python(path_to_python)
knitr::knit_engines$set(python = reticulate::eng_python)
py_available(initialize = TRUE)
x=42
print(x)
x = x+12
print(x)
py$x
#Generated files must be renamed to yyyy-mm-dd-name
KnitPost <- function(site.path='d:/documents/github/msknous.github.io/', overwriteAll=F, overwriteOne=NULL) {
if(!'package:knitr' %in% search()) library('knitr')
## Blog-specific directories.  This will depend on how you organize your blog.
site.path <- site.path # directory of jekyll blog (including trailing slash)
rmd.path <- paste0(site.path, "_Rmd") # directory where your Rmd-files reside (relative to base)
fig.dir <- "assets/Rfig/" # directory to save figures
posts.path <- paste0(site.path, "_posts") # directory for converted markdown files
cache.path <- paste0(site.path, "_cache") # necessary for plots
render_jekyll(highlight = "pygments")
opts_knit$set(base.url = '/', base.dir = site.path)
opts_chunk$set(fig.path=fig.dir, fig.width=8.5, fig.height=5.25, dev='svg', cache=F,
warning=F, message=F, cache.path=cache.path, tidy=F)
setwd(rmd.path) # setwd to base
# some logic to help us avoid overwriting already existing md files
files.rmd <- data.frame(rmd = list.files(path = rmd.path,
full.names = T,
pattern = "\\.Rmd$",
ignore.case = T,
recursive = F), stringsAsFactors=F)
files.rmd$corresponding.md.file <- paste0(posts.path, "/", basename(gsub(pattern = "\\.Rmd$", replacement = ".md", x = files.rmd$rmd)))
files.rmd$corresponding.md.exists <- file.exists(files.rmd$corresponding.md.file)
## determining which posts to overwrite from parameters overwriteOne & overwriteAll
files.rmd$md.overwriteAll <- overwriteAll
if(is.null(overwriteOne)==F) files.rmd$md.overwriteAll[grep(overwriteOne, files.rmd[,'rmd'], ignore.case=T)] <- T
files.rmd$md.render <- F
for (i in 1:dim(files.rmd)[1]) {
if (files.rmd$corresponding.md.exists[i] == F) {
files.rmd$md.render[i] <- T
}
if ((files.rmd$corresponding.md.exists[i] == T) && (files.rmd$md.overwriteAll[i] == T)) {
files.rmd$md.render[i] <- T
}
}
# For each Rmd file, render markdown (contingent on the flags set above)
for (i in 1:dim(files.rmd)[1]) {
if (files.rmd$md.render[i] == T) {
out.file <- knit(as.character(files.rmd$rmd[i]),
output = as.character(files.rmd$corresponding.md.file[i]),
envir = parent.frame(),
quiet = T)
message(paste0("KnitPost(): ", basename(files.rmd$rmd[i])))
}
}
}
KnitPost()
